#include <iostream>
#include <iomanip>
#include <string>
#include <bitset>
#include <vector>

using namespace std;

const int S[8][4][16] = {
    // S1
    {
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13}
    },
    // S2
    {
        {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}
    },
    // S3
    {
        {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}
    },
    // S4
    {
        {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}
    },
    // S5
    {
        {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}
    },
    // S6
    {
        {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}
    },
    // S7
    {
        {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}
    },
    // S8
    {
        {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
        {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
        {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
        {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}
    }
};

const int E[48] = {
    32, 1, 2, 3, 4, 5,
    4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21,
    20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29,
    28, 29, 30, 31, 32, 1
};

const int P[32] = {
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
};

string hex_to_binary(const string& hex) {
    string binary;
    for (char c : hex) {
        int value;
        if (c >= '0' && c <= '9') {
            value = c - '0';
        } else {
            value = 10 + (toupper(c) - 'A');
        }

        for (int i = 3; i >= 0; i--) {
            binary += ((value >> i) & 1) ? '1' : '0';
        }
    }
    return binary;
}

string binary_to_hex(const string& binary) {
    string hex;
    for (size_t i = 0; i < binary.length(); i += 4) {
        int value = 0;
        for (int j = 0; j < 4; j++) {
            value = (value << 1) | (binary[i + j] - '0');
        }

        if (value < 10) {
            hex += ('0' + value);
        } else {
            hex += ('A' + value - 10);
        }
    }
    return hex;
}

string permute(const string& input, const int* table, int output_size) {
    string output(output_size, '0');
    for (int i = 0; i < output_size; i++) {
        output[i] = input[table[i] - 1];
    }
    return output;
}

string f_function(const string& R, const string& K) {
    string expanded = permute(R, E, 48);

    string xor_result(48, '0');
    for (int i = 0; i < 48; i++) {
        xor_result[i] = (expanded[i] == K[i]) ? '0' : '1';
    }

    string s_output;
    for (int i = 0; i < 8; i++) {
        int row = (xor_result[i*6] - '0') * 2 + (xor_result[i*6 + 5] - '0');
        int col = (xor_result[i*6 + 1] - '0') * 8 + (xor_result[i*6 + 2] - '0') * 4 +
                 (xor_result[i*6 + 3] - '0') * 2 + (xor_result[i*6 + 4] - '0');

        int val = S[i][row][col];
        for (int j = 3; j >= 0; j--) {
            s_output += ((val >> j) & 1) ? '1' : '0';
        }
    }

    return permute(s_output, P, 32);
}

string xor_strings(const string& a, const string& b) {
    string result(a.length(), '0');
    for (size_t i = 0; i < a.length(); i++) {
        result[i] = (a[i] == b[i]) ? '0' : '1';
    }
    return result;
}

int main() {
    string L1_hex = "1A09800B";
    string R1_hex = "F2AE92DF";

    string L1 = hex_to_binary(L1_hex);
    string R1 = hex_to_binary(R1_hex);

    vector<string> keys = {
        "101110000000100011011110001011110100011011111110", // K1
        "010000010101111011010010110000100111111111100010", // K2
        "011101001111100111000100011111001010101100111101", // K3
        "000100101110010101000011111100110101110011011010", // K4
        "011010010100010100110111010011011011001100111011", // K5
        "111001011000000110001101101101110111110001101100", // K6
        "000100111000001010110011011010001001101111110110", // K7
        "101111010001100010110010100101011110110010111111", // K8
        "000000011111101100001010101000010111111101001101", // K9
        "001000000011110111010111111110101011001010110010", // K10
        "011101010110110001000001111101010100111100101111", // K11
        "010000111110010110110000000111100011101011011010", // K12
        "110111001000010110010111111101011111000101110101", // K13
        "011101111000001000001011001000111010111011101010", // K14
        "001010111001000010100110111111001011110100010111", // K15
        "100100011011011001001001101111111001000100101101"  // K16
    };

    string L_prev = L1;
    string R_prev = R1;

    cout << "Initial values:" << endl;
    cout << "L1 = " << L1_hex << " (hex) = " << L1 << " (bin)" << endl;
    cout << "R1 = " << R1_hex << " (hex) = " << R1 << " (bin)" << endl << endl;

    cout << "Computing DES rounds 2 to 16:" << endl;
    cout << "----------------------------" << endl;

    for (int i = 1; i <= 15; i++) {
        string L_curr = R_prev;

        string f_result = f_function(R_prev, keys[i]);

        string R_curr = xor_strings(L_prev, f_result);

        string L_curr_hex = binary_to_hex(L_curr);
        string R_curr_hex = binary_to_hex(R_curr);

        cout << "Round " << i+1 << ":" << endl;
        cout << "L" << i+1 << " = R" << i << " = " << L_curr_hex << endl;
        cout << "R" << i+1 << " = L" << i << " XOR f(R" << i << ",K" << i+1 << ") = " << R_curr_hex << endl;
        cout << endl;

        L_prev = L_curr;
        R_prev = R_curr;
    }

    return 0;
}